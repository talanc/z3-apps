(declare-const a1 Bool) (declare-const b1 Bool) (declare-const c1 Bool) (declare-const d1 Bool)
(declare-const a2 Bool) (declare-const b2 Bool) (declare-const c2 Bool) (declare-const d2 Bool)
(declare-const a3 Bool) (declare-const b3 Bool) (declare-const c3 Bool) (declare-const d3 Bool)
(declare-const d4 bool)
(declare-const n1 Int) (declare-const n2 Int) (declare-const n3 Int)

(define-fun op-c ((a Bool) (b Bool) (c Bool)) Bool
    (or
        (and a b)
        (and a c)
        (and b c)
    )
)

(define-fun op-d ((a Bool) (b Bool) (c Bool)) Bool
    (or 
        (and a b c)
        (and a (not b) (not c))
        (and (not a) b (not c))
        (and (not a) (not b) c)
    )
)

(define-fun num ((x1 Bool) (x2 Bool) (x3 Bool) (x4 Bool)) Int
    (+
        (ite x1 1 0)
        (ite x2 2 0)
        (ite x3 4 0)
        (ite x4 8 0)
    )
)

(assert (and
    (= n3 (num d1 d2 d3 d4))
    (= n2 (num b1 b2 b3 false))
    (= n1 (num a1 a2 a3 false))

    ;; First number
    (= a1 true) (= a2 true) (= a3 true)

    ;; Second number
    (= b1 true) (= b2 true) (= b3 true)
    
    ;; Carrys
    (= c1 (op-c a1 b1 false))
    (= c2 (op-c a2 b2 c1))
    (= c3 (op-c a3 b3 c2))

    ;; Adds
    (= d1 (op-d a1 b1 false))
    (= d2 (op-d a2 b2 c1))
    (= d3 (op-d a3 b3 c2))
    (= d4 (op-d true true c3))
))
(check-sat)
(get-model)
