;; Input
;; 1 x | 2 x
;; 3 x | x 1
;; ----|----
;; x x | 3 x
;; x x | x 4

;; Output (expected)
;; 1 4 | 2 3
;; 3 2 | 4 1
;; ----|----
;; 4 1 | 3 2
;; 2 3 | 1 4

;; r c
(declare-fun x (Int Int) Int)

(define-fun check ((a1 Int) (a2 Int) (b1 Int) (b2 Int) (c1 Int) (c2 Int) (d1 Int) (d2 Int)) Bool
    (distinct (x a1 a2) (x b1 b2) (x c1 c2) (x d1 d2))
)

(define-fun check-square ((r Int) (c Int)) Bool
    (check r c r (+ c 1) (+ r 1) c (+ r 1) (+ c 1))
)

(define-fun check-row ((r Int)) Bool
    (check r 1 r 2 r 3 r 4)
)

(define-fun check-col ((c Int)) Bool
    (check 1 c 2 c 3 c 4 c)
)

(assert (and
    ;; Inputs
    (= (x 1 1) 1)
    (= (x 1 3) 2)
    (= (x 2 1) 3)
    (= (x 2 2) 2)
    (= (x 2 4) 1)
    (= (x 3 3) 3)
    (= (x 4 4) 4)

    ;; Ensure all numbers are between 1 and 4 (inclusive)
    (<= 1 (x 1 1) 4)
    (<= 1 (x 1 2) 4)
    (<= 1 (x 1 3) 4)
    (<= 1 (x 1 4) 4)
    (<= 1 (x 2 1) 4)
    (<= 1 (x 2 2) 4)
    (<= 1 (x 2 3) 4)
    (<= 1 (x 2 4) 4)
    (<= 1 (x 3 1) 4)
    (<= 1 (x 3 2) 4)
    (<= 1 (x 3 3) 4)
    (<= 1 (x 3 4) 4)
    (<= 1 (x 4 1) 4)
    (<= 1 (x 4 2) 4)
    (<= 1 (x 4 3) 4)
    (<= 1 (x 4 4) 4)

    ;; Square checks
    (check-square 1 1)
    (check-square 1 3)
    (check-square 3 1)
    (check-square 3 3)

    ;; Row checks
    (check-row 1)
    (check-row 2)
    (check-row 3)
    (check-row 4)

    ;; Column checks
    (check-col 1)
    (check-col 2)
    (check-col 3)
    (check-col 4)
))

(check-sat)
(get-model)
